{"ast":null,"code":"var _jsxFileName = \"/Users/tsopin/Desktop/split-nft/src/Minter.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, setApproval, transferToken } from \"./util/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Minter = props => {\n  _s();\n\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n  const [tokenAddress, setTokenAddress] = useState(\"\");\n  const [tokenID, setTokenID] = useState(\"\");\n  useEffect(async () => {\n    const {\n      address,\n      status\n    } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://metamask.io/download.html`,\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const {\n      success,\n      status\n    } = await mintNFT(url, name, description);\n    setStatus(status);\n\n    if (success) {\n      setName(\"\");\n      setDescription(\"\");\n      setURL(\"\");\n    }\n  };\n\n  const onSetApprovalPressed = async () => {\n    const {\n      success,\n      status\n    } = await setApproval(tokenAddress);\n    setStatus(status);\n\n    if (success) {\n      setTokenAddress(\"\");\n      setTokenID(\"\");\n    }\n  };\n\n  const onTransferPressed = async () => {\n    const {\n      success,\n      status\n    } = await transferToken(tokenAddress, tokenID);\n    setStatus(status);\n\n    if (success) {\n      setTokenAddress(\"\");\n      setTokenID(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Minter\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"title\",\n      children: \"NFT Splitter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Contract address: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Address\",\n        onChange: event => setName(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Token ID: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"0\",\n        onChange: event => setDescription(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"mintButton\",\n      onClick: onSetApprovalPressed,\n      children: \"Transfer NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"mintButton\",\n      onClick: onTransferPressed,\n      children: \"Transfer NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"status\",\n      style: {\n        color: \"red\"\n      },\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Minter, \"ofhWScVxADYrsAx6qOcIjLKrbl4=\");\n\n_c = Minter;\nexport default Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Minter\");","map":{"version":3,"sources":["/Users/tsopin/Desktop/split-nft/src/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWalletConnected","setApproval","transferToken","Minter","props","walletAddress","setWallet","status","setStatus","name","setName","description","setDescription","url","setURL","tokenAddress","setTokenAddress","tokenID","setTokenID","address","addWalletListener","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","onMintPressed","success","mintNFT","onSetApprovalPressed","onTransferPressed","String","substring","event","target","value","color"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  setApproval,\n  transferToken\n} from \"./util/interact.js\";\n\nconst Minter = (props) => {\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n\n\n  const [tokenAddress, setTokenAddress] = useState(\"\");\n  const [tokenID, setTokenID] = useState(\"\");\n\n  useEffect(async () => {\n    const { address, status } = await getCurrentWalletConnected();\n\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { success, status } = await mintNFT(url, name, description);\n    setStatus(status);\n    if (success) {\n      setName(\"\");\n      setDescription(\"\");\n      setURL(\"\");\n    }\n  };\n\n  const onSetApprovalPressed = async () => {\n    const { success, status } = await setApproval(tokenAddress);\n    setStatus(status);\n    if (success) {\n      setTokenAddress(\"\");\n      setTokenID(\"\");\n    }\n  };\n\n  const onTransferPressed = async () => {\n    const { success, status } = await transferToken(tokenAddress, tokenID);\n    setStatus(status);\n    if (success) {\n      setTokenAddress(\"\");\n      setTokenID(\"\");\n    }\n  };\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">NFT Splitter</h1>\n      <form>\n        <h2> Contract address: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"Address\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>Token ID: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"0\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onSetApprovalPressed}>\n        Transfer NFT\n      </button>\n      <button id=\"mintButton\" onClick={onTransferPressed}>\n        Transfer NFT\n      </button>\n      <p id=\"status\" style={{ color: \"red\" }}>\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n"]},"metadata":{},"sourceType":"module"}