[{"/Users/tsopin/Desktop/nft-minter/src/index.js":"1","/Users/tsopin/Desktop/nft-minter/src/reportWebVitals.js":"2","/Users/tsopin/Desktop/nft-minter/src/App.js":"3","/Users/tsopin/Desktop/nft-minter/src/Minter.js":"4","/Users/tsopin/Desktop/nft-minter/src/util/interact.js":"5","/Users/tsopin/Desktop/nft-minter/src/util/pinata.js":"6","/Users/tsopin/Desktop/split-nft/src/index.js":"7","/Users/tsopin/Desktop/split-nft/src/reportWebVitals.js":"8","/Users/tsopin/Desktop/split-nft/src/App.js":"9","/Users/tsopin/Desktop/split-nft/src/Minter.js":"10","/Users/tsopin/Desktop/split-nft/src/util/interact.js":"11","/Users/tsopin/Desktop/split-nft/src/util/pinata.js":"12"},{"size":500,"mtime":1635284747000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1635284747000,"results":"15","hashOfConfig":"14"},{"size":175,"mtime":1635284747000,"results":"16","hashOfConfig":"14"},{"size":2935,"mtime":1642068399863,"results":"17","hashOfConfig":"14"},{"size":3740,"mtime":1642069204442,"results":"18","hashOfConfig":"14"},{"size":852,"mtime":1635284747000,"results":"19","hashOfConfig":"14"},{"size":500,"mtime":1635284747000,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1635284747000,"results":"22","hashOfConfig":"21"},{"size":175,"mtime":1635284747000,"results":"23","hashOfConfig":"21"},{"size":3392,"mtime":1642693766264,"results":"24","hashOfConfig":"21"},{"size":5444,"mtime":1642693709638,"results":"25","hashOfConfig":"21"},{"size":852,"mtime":1635284747000,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"9h532u",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"12u5m59",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/tsopin/Desktop/nft-minter/src/index.js",[],["55","56"],"/Users/tsopin/Desktop/nft-minter/src/reportWebVitals.js",[],"/Users/tsopin/Desktop/nft-minter/src/App.js",[],"/Users/tsopin/Desktop/nft-minter/src/Minter.js",["57","58"],"import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  mintNFT,\n} from \"./util/interact.js\";\n\nconst Minter = (props) => {\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n\n  useEffect(async () => {\n    const { address, status } = await getCurrentWalletConnected();\n\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { success, status } = await mintNFT(url, name, description);\n    setStatus(status);\n    if (success) {\n      setName(\"\");\n      setDescription(\"\");\n      setURL(\"\");\n    }\n  };\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">NFT Minter</h1>\n      <form>\n        <h2>🖼 Link to asset: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\n          onChange={(event) => setURL(event.target.value)}\n        />\n        <h2>🤔 Name: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>✍️ Description: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\" style={{ color: \"red\" }}>\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","/Users/tsopin/Desktop/nft-minter/src/util/interact.js",["59","60","61","62","63","64","65"],"import { pinJSONToIPFS } from \"./pinata.js\";\nrequire(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0xa210926a311284106eD7765c44c07A517bADE88E\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nasync function loadContract() {\n  return new web3.eth.Contract(contractABI, contractAddress);\n}\n\nexport const mintNFT = async (url, name, description) => {\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\",\n    };\n  }\n\n  //make metadata\n  const metadata = new Object();\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description;\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\n    };\n  }\n  const tokenURI = pinataResponse.pinataUrl;\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n};\n","/Users/tsopin/Desktop/nft-minter/src/util/pinata.js",[],"/Users/tsopin/Desktop/split-nft/src/index.js",[],["66","67"],"/Users/tsopin/Desktop/split-nft/src/reportWebVitals.js",[],"/Users/tsopin/Desktop/split-nft/src/App.js",[],"/Users/tsopin/Desktop/split-nft/src/Minter.js",["68","69","70","71","72","73","74","75","76"],"/Users/tsopin/Desktop/split-nft/src/util/interact.js",["77","78","79","80","81","82","83","84","85"],"/Users/tsopin/Desktop/split-nft/src/util/pinata.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":16,"column":13,"nodeType":"92","endLine":23,"endColumn":4},{"ruleId":"93","severity":1,"message":"94","line":41,"column":11,"nodeType":"95","endLine":41,"endColumn":73},{"ruleId":"93","severity":1,"message":"94","line":34,"column":13,"nodeType":"95","endLine":34,"endColumn":75},{"ruleId":"93","severity":1,"message":"94","line":76,"column":13,"nodeType":"95","endLine":76,"endColumn":75},{"ruleId":"96","severity":1,"message":"97","line":87,"column":16,"nodeType":"98","messageId":"99","endLine":87,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":92,"column":18,"nodeType":"102","messageId":"103","endLine":92,"endColumn":20},{"ruleId":"100","severity":1,"message":"101","line":92,"column":39,"nodeType":"102","messageId":"103","endLine":92,"endColumn":41},{"ruleId":"100","severity":1,"message":"101","line":92,"column":67,"nodeType":"102","messageId":"103","endLine":92,"endColumn":69},{"ruleId":"104","severity":1,"message":"105","line":100,"column":20,"nodeType":"106","messageId":"107","endLine":100,"endColumn":32},{"ruleId":"86","replacedBy":"108"},{"ruleId":"88","replacedBy":"109"},{"ruleId":"96","severity":1,"message":"110","line":14,"column":10,"nodeType":"98","messageId":"99","endLine":14,"endColumn":14},{"ruleId":"96","severity":1,"message":"111","line":14,"column":16,"nodeType":"98","messageId":"99","endLine":14,"endColumn":23},{"ruleId":"96","severity":1,"message":"112","line":15,"column":10,"nodeType":"98","messageId":"99","endLine":15,"endColumn":21},{"ruleId":"96","severity":1,"message":"113","line":15,"column":23,"nodeType":"98","messageId":"99","endLine":15,"endColumn":37},{"ruleId":"96","severity":1,"message":"114","line":16,"column":10,"nodeType":"98","messageId":"99","endLine":16,"endColumn":13},{"ruleId":"96","severity":1,"message":"115","line":16,"column":15,"nodeType":"98","messageId":"99","endLine":16,"endColumn":21},{"ruleId":"90","severity":1,"message":"91","line":22,"column":13,"nodeType":"92","endLine":29,"endColumn":4},{"ruleId":"93","severity":1,"message":"94","line":47,"column":11,"nodeType":"95","endLine":47,"endColumn":73},{"ruleId":"96","severity":1,"message":"116","line":64,"column":13,"nodeType":"98","messageId":"99","endLine":64,"endColumn":20},{"ruleId":"96","severity":1,"message":"117","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":34,"column":13,"nodeType":"95","endLine":34,"endColumn":75},{"ruleId":"93","severity":1,"message":"94","line":76,"column":13,"nodeType":"95","endLine":76,"endColumn":75},{"ruleId":"96","severity":1,"message":"97","line":87,"column":16,"nodeType":"98","messageId":"99","endLine":87,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":92,"column":28,"nodeType":"102","messageId":"103","endLine":92,"endColumn":30},{"ruleId":"100","severity":1,"message":"101","line":133,"column":27,"nodeType":"102","messageId":"103","endLine":133,"endColumn":29},{"ruleId":"100","severity":1,"message":"101","line":133,"column":44,"nodeType":"102","messageId":"103","endLine":133,"endColumn":46},{"ruleId":"100","severity":1,"message":"101","line":172,"column":27,"nodeType":"102","messageId":"103","endLine":172,"endColumn":29},{"ruleId":"100","severity":1,"message":"101","line":172,"column":44,"nodeType":"102","messageId":"103","endLine":172,"endColumn":46},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-unused-vars","'loadContract' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral",["118"],["119"],"'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'description' is assigned a value but never used.","'setDescription' is assigned a value but never used.","'url' is assigned a value but never used.","'setURL' is assigned a value but never used.","'success' is assigned a value but never used.","'pinJSONToIPFS' is defined but never used.","no-global-assign","no-unsafe-negation"]